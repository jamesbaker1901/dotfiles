set nocompatible              
filetype off 

" set the runtime path to include Vundle and initialize
set rtp+=/Users/jbaker/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

"status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

"Language Support
Plugin 'fatih/vim-go'
Plugin 'rust-lang/rust.vim'

"Coding help
Plugin 'Raimondi/delimitMate' 			" auto-close delimiters
Plugin 'tpope/vim-fugitive' 			" git helper
Plugin 'kien/ctrlp.vim' 			" fuzzy finder
Plugin 'scrooloose/syntastic' 			" multi lang syntax checker
Plugin 'scrooloose/nerdtree' 			" file browswer
Plugin 'jpalardy/vim-slime' 			" send commands to tmux
Plugin 'ervandew/supertab'			" needed for YCM ad UltiSnips compatibiliy

"General
Plugin '907th/vim-auto-save'
Plugin 'tpope/vim-obsession' 			" save vim session
Plugin 'tmux-plugins/vim-tmux-focus-events' 	" fixes FocusGained and FocusLost events
Plugin 'farmergreg/vim-lastplace.git' 		" saves cursor position
"Plugin 'edkolev/tmuxline.vim'			" sync tmux & vim statusline

"Editing
Plugin 'jeffkreeftmeijer/vim-numbertoggle' 	" toggles relative or static line nums

"DSLs
Plugin 'hashivim/vim-terraform'
Plugin 'hashivim/vim-consul'
Plugin 'hashivim/vim-nomadproject'
Plugin 'cespare/vim-toml'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'plasticboy/vim-markdown'

"Themes
Plugin 'Marfisc/vorange'
Plugin 'reedes/vim-thematic'
Plugin 'ntk148v/vim-horizon'
Plugin 'morhetz/gruvbox'
Plugin 'agude/vim-eldar'
Plugin 'Nequo/vim-allomancer'
Plugin 'tomasr/molokai'
Plugin 'chriskempson/base16-vim'
Plugin 'ajmwagar/vim-deus'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"general options
syntax on
set encoding=utf-8
set number
set t_Co=256
set term=xterm-256color
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttymouse=xterm2             " Indicate terminal type for mouse codes
set mouse=a			" enable mouse
set ttyscroll=3                 " Speedup scrolling
set laststatus=2                " Show status line always
set encoding=utf-8              " Set default encoding to UTF-8
set autoread                    " Automatically read changed files
set autoindent                  " Enable Auto-indent
set backspace=indent,eol,start  " Makes backspace key more powerful.
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set noerrorbells                " No beeps
set number                      " Show line numbers
set showcmd                     " Show me what I'm typing
set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case
set completeopt=menu,menuone    " Show popup menu, even if there is one entry
set pumheight=10                " Completion window max size
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
set lazyredraw                  " Wait to redraw
set clipboard=unnamed 		      " use system clipboard
set nofoldenable		            " turn off folding
set updatetime=100		          " update time
set cursorline                  " set horizontal cursorline


let mapleader = ","	            " remap leader to ,
 
" go stuff
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_auto_type_info = 1
let g:go_def_mode='godef'
"let g:go_fmt_command = "goimports"

" configure vim-slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{right-of}"}

"general remaps
imap ;; <esc>
nmap ; :w<CR>
nmap <leader>q :q<CR>
command! W :w

"next buffer
noremap <C-j> :bn<CR> 
"previous buffer
noremap <C-k> :bp<CR>
"close buffer
noremap <C-d> :bd<CR>
"exit normal mode
imap <RightMouse> <Esc>
"enter insert mode
nmap <RightMouse> i<LeftMouse>

" sends ctrl+c to the right pane in tmux
nmap <c-c> :!tmux send-keys -t right C-c<CR><CR>
" sends ctrl+l for clear to the right pane in tmux
nmap <c-l> :SlimeSend0 "<c-l>"<CR>
" send ll, shortcut for 'exa -bghHliS'
nmap <buffer> <c-l><c-l> :SlimeSend1 ll<CR>

let g:ycm_key_list_select_completion = ['<C-j>']
let g:ycm_key_list_previous_completion = ['<C-k>']

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetsDir='/Users/jaybaker/.vim/mysnippets'
let g:UltiSnipsSnippetDirectories=["mysnippets"]


"file type dependent key mappings
"go


"when opening a .go file, call SlimeSend first so we can hit enter twice to
"set the default pane
autocmd FileType go nmap <leader>b :SlimeSend1 go build<CR>
"requires you to create the hidden file .run.sh with the command to run the
"program
autocmd FileType go nmap <leader>r :SlimeSend1 go build && ./.run.sh<CR>
autocmd FileType go nmap <leader>t :SlimeSend1 go test<CR>
autocmd FileType go nmap <leader>d <Esc> :GoDef<CR>

"rust
autocmd FileType rust nmap <leader>b :SlimeSend1 cargo build<CR>
autocmd FileType rust nmap <leader>r :SlimeSend1 cargo build && ./.run.sh<CR>
autocmd FileType rust nmap <leader>t :SlimeSend1 cargo test<CR>


" Airline options
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
map <C-n> :NERDTreeToggle<CR>

let NERDTreeShowHidden=1

" Syntax checking
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_go_checkers = ['govet', 'errcheck', 'go']

" settings for various file types
au BufNewFile,BufRead *.go
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix|

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

au! BufNewFile,BufReadPost *.{yaml,yml} 
    \ set filetype=yaml

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"configure airline
let g:airline_theme="deus"
let g:airline_powerline_fonts = 1

"general tweaks
set cursorline "highligh the current line

"choose theme
"colorscheme alduin
colorscheme deus
